declare name        "Spherical Harmonics library";
declare version     "1.0";
declare author      "Pierre Lecomte";
declare license     "GPL";
declare copyright   "(c) Pierre Lecomte 2017"; 

// Library of N3D spherical harmonics ymn at arbitrary order m, degree n, from associated Legendre polynomials reccurence formulas [5]
// Note the Condon–Shortley phase is not included ! [5]
// ACN numbering [2]
// Spherical coordinates as in [3]
// References: 
// [1] Daniel, J. (2000). Représentation de champs acoustiques, application à la transmission et à la reproduction de scènes sonores complexes dans un contexte multimédia. Université Paris 6, Paris, France.
// [2] Nachbar, C., Zotter, F., Deleflie, E., & Sontacchi, A. (2011). Ambix - A suggested ambisonics format. In Ambisonics Symposium, Lexington.
// [3] Lecomte, P., Gauthier, P.-A., Langrenne, C., Garcia, A., & Berry, A. (2015). On the use of a Lebedev grid for Ambisonics. In Audio Engineering Society Convention 139. New York.
// [4] http://ambisonics.ch/standards/channels/
// [5] https://en.wikipedia.org/wiki/Associated_Legendre_polynomials

// FACTORIAL
factorial = case{
                (0) => 1;
                (n) => n*factorial(n-1);
                };

// DOUBLE FACTORIAL
factorial2 = case{
                (0) => 1;
                (1) => 1;
                (n) => n*factorial2(n-2);
                };

// LEGENDRE POLYNOMIALS
legendre(m,x) = case{
                (0) => 1;
                (1) => x;
                (m) => ((2*m-1)*x*legendre(m-1,x) - (m-1)*legendre(m-2,x))/m;
                }(m);

// ASSOCIATED LEGENDRE POLYNOMIALS
alegendre(m,n,x) =  case{
                (1,0,1) => 1; // special case to avoid evaluate factorial2(-1)
                (1,0,0) => factorial2(2*m-1)*(1-x^2)^(m/2); // (1)^m not included here
                (0,1,0) => x*(2*m-1)*alegendre(m-1,m-1,x);
                (0,0,0) => 1/(m-n)*((2*m-1)*x*alegendre(m-1,n,x)-(m-1+n)*alegendre(m-2,n,x));
                }(n==m,n==(m-1),m==0);
                
// N3D NORM
n3d(m,n) =  case{
            (0) => 1;
            (n) => sqrt(2);
            }(n);
               
// SPHERICAL HARMONIC         
ymn(m,n,t,d) = n3d(m,n)*alegendre(m,abs(n),sin(d))*
            case{
            (1) => sin(abs(n)*t);
            (0) => cos(abs(n)*t);
            }(n<0);

// DEFINITION WITH 1 SUBSCRIPT ACN
acn(m,n)=m^2+m+n;

yacn(i,t,d) = ymn(m,n,t,d) with 
            {
                m = int(sqrt(i));
                n = int(i - m^2 -m);
            };

// VECTOR OF SPHERICAL HARMONICS : SIGNAL MULTIPLIED BY SPHERICAL HARMONICS
yvec(i,t,d) = par(j,i,_*yacn(j,t,d));

// GAMMA ANGLE BETWEEN VIRTUAL SOURCE (T1,D1) AND SPEAKER (T2,D2)
angle(t1,d1,t2,d2) = cos(d1)*cos(d2)*cos(t1-t2)+sin(d1)*sin(d2);